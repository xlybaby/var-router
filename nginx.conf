worker_processes  4;        #nginx worker 数量
error_log logs/error.log;   #指定错误日志文件路径
events {
    worker_connections 1024;
}

http {

    upstream platform {
      server 127.0.0.1:7001 weight=1 max_fails=2 fail_timeout=30s;
    }

    upstream datacenter {
      server 127.0.0.1:40001 weight=1 max_fails=2 fail_timeout=30s;
    }

    server {
       
        listen 80;
        #location / {
        #    default_type text/html;

        #    content_by_lua_block {
        #        ngx.say("HelloWorld")
        #    }
        #}
        
 
        location ~* \.(gif|jpg|jpeg|bmp|png|ico|txt|js|css|svg|ttf)$ {
           root /Users/apple/Documents/var/workspace/var-static;
        }

        location /datacenter {
          proxy_set_header Host  $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For  $remote_addr;
          proxy_pass http://datacenter;
        }

        location /platform {
          proxy_set_header Host  $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For  $remote_addr;
          proxy_pass http://platform;
        }

        location /web {
          root /Users/apple/Documents/var/workspace/var-static/var;
        }

        location /luaio {
          default_type text/html;
          content_by_lua '
        local io = require("io")
        local chunk_SIZE = 4096
        local f = assert(io.open("/Users/apple/Documents/var/workspace/var-static/var/web/writeScenario.html","r"))
        while true do
            local chunk = f:read(chunk_SIZE)
            if not chunk then
                break
            end
            ngx.print(chunk)
            ngx.flush(true)
        end
        f:close()
    ';
        }

        location /var/view {
          #default_type text/html;
          add_header Content-Type 'text/html; charset=utf-8';
          #set $ret 'return message';

          content_by_lua '
              local header = ngx.location.capture("/web/header.html")
              local footer = ngx.location.capture("/web/footer.html")
              local request_uri = ngx.var.request_uri
              local res = string.sub(request_uri, string.len("/var/view/")+1)
              local content = ngx.location.capture("/web/"..res..".html")
              --ngx.say(header.body..content.body..footer.body)
              --ngx.say(header.body)
              --ngx.say(content.body)
              --ngx.say("/web/"..res..".html")
              --ngx.say(footer.body)
              --ngx.var.ret = header.body..content.body..footer.body
              
          ';

          #return 200 $body;
        }
    }
}
