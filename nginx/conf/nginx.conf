
#user  nobody;
worker_processes  4;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    upstream platform {
      server 127.0.0.1:7001 weight=1 max_fails=2 fail_timeout=30s;
    }

    upstream datacenter {
      server 127.0.0.1:40001 weight=1 max_fails=2 fail_timeout=30s;
    }

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        #location / {
        #    root   html;
        #    index  index.html index.htm;
        #}

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}

        #location ~* \.(html|htm|jsp|php)$ {
        #   deny  all;
        #}
 
        location ~* \.(gif|jpg|jpeg|bmp|png|ico|txt|js|css|svg|ttf)$ {
           root D:/developer/var-workspace/var-static;
        }
        
        location /datacenter {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://datacenter;
        }

        location /platform {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://platform;
        }

        location /var/view {
          rewrite ^/var/view/(.*)$ /web/$1.html last;
        }

        location /web {
          root D:/developer/var-workspace/var-static/var;
        }

        #location /var/view {
        #  #default_type text/html;
        #  add_header Content-Type 'text/html; charset=utf-8';
        #  #set $ret 'return message';

        #  content_by_lua '
        #      local header = ngx.location.capture("/web/header.html")
        #      local footer = ngx.location.capture("/web/footer.html")
        #      local request_uri = ngx.var.request_uri
        #      local res = string.sub(request_uri, string.len("/var/view/")+1)
        #      local content = ngx.location.capture("/web/"..res..".html")
        #      --ngx.say(header.body..content.body..footer.body)
        #      --ngx.say(header.body)
        #      --ngx.say(content.body)
        #      --ngx.say("/web/"..res..".html")
        #      --ngx.say(footer.body)
        #      --ngx.var.ret = header.body..content.body..footer.body
        #      
        #  ';

        #  #return 200 $body;
        #}

    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
